name: Create and test resourses CI

on: 
  pull_request:
    branches:
      - oamlops/dev
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main 
#    paths:
#|        - oamlops/bundle_resources/**  
#|        - oamlops/databricks.yml  

        
  
  
defaults:
    run:
       working-directory: oamlops
env:
    SAS_TOCKEN: ${{ secrets.TERRAFORM_STORAGE_SAS_TOCKEN }}
    
jobs:
  action:  #always run
    name: "Environment variables"
    runs-on: ubuntu-latest
    
    outputs:
      BRANCH_NAME: ${{ steps.set-vars.outputs.BRANCH_NAME }}
      #DATABBRICKS_HOST: ${{ steps.set-vars.outputs.DATABBRICKS_HOST }}
      DATABRICKS_TOKEN: ${{ steps.set-vars.outputs.DATABRICKS_TOKEN }}
      DATABRICKS_BUNDLE_ENV: ${{ steps.set-vars.outputs.DATABRICKS_TOKEN }}
    steps:
    # Check out this repo, so that this workflow can access it.
      - name: Checkout code
        uses: actions/checkout@v3
      - name: action detected 
        id: set-vars
        run: |
            if [[ "${{ github.event_name }}" == "push" ]] ; then
               echo "The action is: ${{ github.event_name }}"
               BRANCH_NAME="main"
               DATABRICKS_BUNDLE_ENV="prod"
               
               
             elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
               echo "The action is: ${{ github.event_name }}"
               BRANCH_NAME=${{ github.head_ref }}
               DATABRICKS_BUNDLE_ENV="qa"
               
              
             fi
             echo "BRANCH_NAME=$BRANCH_NAME"
             echo "DATABRICKS_BUNDLE_ENV=$DATABRICKS_BUNDLE_ENV"
S             echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
             echo "DATABRICKS_BUNDLE_ENV=$DATABRICKS_BUNDLE_ENV" >>$GITHUB_OUTPUT
#   pool:
#     name: "pool"
#     runs-on: ubuntu-latest
#     needs: action  
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#       - name: Get envs 
#         run: 
# #DATABRICKS CLI
# # ** I have put the following code because when updating the latest version it stopped working. You should investigate why and follow the next step that is mentioned.
#       - name: Install specific version of Databricks CLI
#         run: |
#             pwd
#             ls -lrt databricks_cli_0.220.0_linux/databricks
#             chmod 777 databricks_cli_0.220.0_linux/databricks
#             cp databricks_cli_0.220.0_linux/databricks .
 
# #       # Download the Databricks CLI.
# #       - name: Install Databricks CLI
# #         run: |
# #            curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
# #            databricks -v
# # Deploy the bundle to the "qa" target as defined
# # in the bundle's settings file.   
#       - name: check env variables
#         run: |
#                 echo " DATABRICKS_BUNDLE_ENV  ${{ env.DATABRICKS_BUNDLE_ENV}} "    
#                 echo " BRANCH_NAME ${{ env.BRANCH_NAME }}"
            
#       - name: get environment
#         run:  |
#                DATABBRICKS_HOST=databricks bundle validate | grep Host | awk '{print $2}'
#                echo "DATABBRICKS_HOST=$DATABBRICKS_HOST" >>$GITHUB_ENV
#       - name: check env variables
#         run: |
#              echo " DATABRICKS_BUNDLE_ENV  ${{ env.DATABRICKS_BUNDLE_ENV}} "  
#              echo "DATABBRICKS_HOST ${{ env.DATABBRICKS_HOST }}"  
#              echo " BRANCH_NAME ${{ env.BRANCH_NAME }}"   
      
#       - name: Set environment variables
#         run: |
#            echo "TF_VAR_databricks_host= ${{ env.DATABBRICKS_HOST }}" >> $GITHUB_ENV
#            echo "TF_VAR_databricks_token=${{ needs.action.outputs.DATABRICKS_TOKEN }}" >> $GITHUB_ENV
#            echo "TF_VAR_pool_name=${{env.DATABRICKS_BUNDLE_ENV}}_bandel_pool" >> $GITHUB_ENV
         

#       - name: Terraform version
#         run: terraform -v
        
#       - name: Terraform Init
#         run: terraform init -backend-config="sas_token=${{ env.SAS_TOCKEN }}"
        
#       - name: Terraform Validate
#         run: terraform validate 
        
#       - name: Terraform Plan
#         run: |
#               terraform plan  # -var-file terraform.tfvars
        
#       - name: Terraform apply
#         run: |
#              terraform apply -auto-approve #-var-file terraform.tfvars
        
       





#   deploy: 
#     name: "Deploy jobs"
#     runs-on: ubuntu-latest
#     needs: [action, pool]
#     if:  ${{ needs.action.outputs.DATABRICKS_BUNDLE_ENV }} == 'qa' 
#     env:
#       DATABRICKS_BUNDLE_ENV: ${{ needs.action.outputs.DATABRICKS_BUNDLE_ENV }}
#       BRANCH_NAME: ${{ needs.action.outputs.BRANCH_NAME }}
      
#     steps:
# #REPO
#  # Check out this repo, so that this workflow can access it.
#         - name: Checkout code
#           uses: actions/checkout@v3
 
# #DATABRICKS CLI
# # ** I have put the following code because when updating the latest version it stopped working. You should investigate why and follow the next step that is mentioned.
#         - name: Install specific version of Databricks CLI
#           run: |
#                pwd
#                ls -lrt databricks_cli_0.220.0_linux/databricks
#                whoami
#                chmod 777 databricks_cli_0.220.0_linux/databricks
#                databricks_cli_0.220.0_linux/databricks -v
#                cp databricks_cli_0.220.0_linux/databricks .
#                ./databricks -v
#  #       # Download the Databricks CLI.
#  #       - name: Install Databricks CLI
#  #         run: |
#  #            curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
#  #            databricks -v
#       # Deploy the bundle to the "qa" target as defined
#       # in the bundle's settings file.
# #DATABRICKS VALIDATION
#         - name: Validation
#           run: ./databricks bundle validate #--output json
# # DEPLOY
#         - name: deploy
#           run: ./databricks bundle deploy
 
#   run:
#      name: "Start_copy_session qa"
#      needs: [action,deploy] 
#      env:
#        DATABRICKS_BUNDLE_ENV: ${{ needs.action.outputs.DATABRICKS_BUNDLE_ENV }}
#        BRANCH_NAME: ${{ needs.action.outputs.BRANCH_NAME }}
       
#      if: ${{ needs.action.outputs.BRANCH_NAME != 'main' }}
#      runs-on: ubuntu-latest
#      steps:
#       # Check out this repo, so that this workflow can access it.
#          - name: Checkout code
#            uses: actions/checkout@v3
# # ** I have put the following code because when updating the latest version it stopped working. You should investigate why and follow the next step that is mentioned.
   
#          - name: Check environment and action
#            run: |
#                 echo "env.BRANCH_NAME : ${{ env.BRANCH_NAME  }}"
#                 echo "env.DATABRICKS_BUNDLE_ENV : ${{ env.DATABRICKS_BUNDLE_ENV  }}"
#          - name: Install specific version of Databricks CLI
#            run: |
#              chmod 777 databricks_cli_0.220.0_linux/databricks
#              cp databricks_cli_0.220.0_linux/databricks .
# #          # Download the Databricks CLI.
# #         - name: Install Databricks CLI
# #           run: |
# #                curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
# #              databricks -v    

#          - name: set variables # set variables from environment to test one session
#            run: |
#                  source variables/variables.env
#                  echo "INFERENCE_MLFLOW_MODEL_RUN_ID=$INFERENCE_MLFLOW_MODEL_RUN_ID" >> $GITHUB_ENV
#                  echo "PANORAME_ZOOM_LEVEL=$PANORAME_ZOOM_LEVEL" >> $GITHUB_ENV
#                  echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
#                  echo "SESSION_NAMES=$SESSION_NAMES" >> $GITHUB_ENV
#                  echo "DESTINATION_FOLDER_SAS_TOKEN=$DESTINATION_FOLDER_SAS_TOKEN" >> $GITHUB_ENV

#          - name: start copy_session
#            run: |
#               # read variables to check 
#                  echo "INFERENCE_MLFLOW_MODEL_RUN_ID ${{ env.INFERENCE_MLFLOW_MODEL_RUN_ID }} "
#                  echo "PANORAME_ZOOM_LEVEL ${{ env.outputs.PANORAME_ZOOM_LEVEL }}"
#                  echo "PROJECT_NAME ${{ env.outputs.PROJECT_NAME }}"
#                  echo "SESSION_NAMES ${{ env.SESSION_NAMES }}"            
#                  echo  DESTINATION_FOLDER_SAS_TOKEN: ${{ env.DESTINATION_FOLDER_SAS_TOKEN }}
                
#                 # Start job
#                  echo ' ./databricks bundle run --params "inference.mlflow_model_run_id=${{ env.INFERENCE_MLFLOW_MODEL_RUN_ID }},panorama.zoom_level=${{ env.PANORAME_ZOOM_LEVEL }},project_name=${{ env.PROJECT_NAME }},session_names=${{ env.SESSION_NAMES }},destination_folder_sas_token=${{ env.DESTINATION_FOLDER_SAS_TOKEN  }},databricks_env=${{ env.DATABRICKS_BUNDLE_ENV }}" oamlops_one_session_copy_sessions'
              
#                  ./databricks bundle run --params "inference.mlflow_model_run_id=${{ env.INFERENCE_MLFLOW_MODEL_RUN_ID }},panorama.zoom_level=${{ env.PANORAME_ZOOM_LEVEL }},project_name=${{ env.PROJECT_NAME }},session_names=${{ env.SESSION_NAMES }},destination_folder_sas_token=${{ env.DESTINATION_FOLDER_SAS_TOKEN  }},databricks_env=${{ env.DATABRICKS_BUNDLE_ENV }}" oamlops_one_session_copy_sessions

#   test:  
#       name: "Test"
#       needs: [action,run] 
#       env:
#          DATABRICKS_BUNDLE_ENV: ${{ needs.action.outputs.DATABRICKS_BUNDLE_ENV }}
#          BRANCH_NAME: ${{ needs.action.outputs.BRANCH_NAME }}
    
#       if: ${{ needs.action.outputs.BRANCH_NAME != 'main' }}
#       runs-on: ubuntu-latest
#       steps:
#    # Check out this repo, so that this workflow can access it.
#         - name: Checkout code
#           uses: actions/checkout@v3
# # ** I have put the following code because when updating the latest version it stopped working. You should investigate why and follow the next step that is mentioned.

#         - name: Check environment and action
#           run: |
#                echo "env.BRANCH_NAME : ${{ env.BRANCH_NAME  }}"
#                echo "env.DATABRICKS_BUNDLE_ENV : ${{ env.DATABRICKS_BUNDLE_ENV  }}"  